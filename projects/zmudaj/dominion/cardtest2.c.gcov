        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    5: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:// set NOISY_TEST to 0 to remove printfs from output
        -:   17:#define NOISY_TEST 1
        -:   18:
function main called 1 returned 100% blocks executed 100%
        1:   19:int main() {
        -:   20:    int i;
        -:   21:	int j;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayer = 2;
        1:   24:    int maxBonus = 10;
        -:   25:    int p, r, handCount;
        -:   26:    int bonus;
        1:   27:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   28:               , remodel, smithy, village, baron, great_hall};
        -:   29:    struct gameState G;
        1:   30:    int maxHandCount = 5;
        -:   31:    // arrays of all coppers, silvers, and golds
        -:   32:    int coppers[MAX_HAND];
        -:   33:    int silvers[MAX_HAND];
        -:   34:    int golds[MAX_HAND];
      501:   35:    for (i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   36:    {
      500:   37:        coppers[i] = copper;
      500:   38:        silvers[i] = silver;
      500:   39:        golds[i] = gold;
        -:   40:    }
        -:   41:
        -:   42:	// Adventurer
        -:   43:	int AdventurerEffect(struct gameState *state)
        -:   44:	{
        -:   45:		int i;
        -:   46:		int j;
        -:   47:		int k;
        -:   48:		int x;
        -:   49:		int index;
        -:   50:		int currentPlayer = whoseTurn(state);
        -:   51:		int nextPlayer = currentPlayer + 1;
        -:   52:
        -:   53:		int temphand[MAX_HAND];// moved above the if statement
        -:   54:		int drawntreasure = 0; //keep
        -:   55:		int cardDrawn;
        -:   56:		int z = 0;// this is the counter for the temp hand
        -:   57:		if (nextPlayer > (state->numPlayers - 1)) {
        -:   58:			nextPlayer = 0;
        -:   59:		}
        -:   60:		while (drawntreasure<2) {
        -:   61:			if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
        -:   62:				shuffle(currentPlayer, state);
        -:   63:			}
        -:   64:			drawCard(currentPlayer, state);
        -:   65:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        -:   66:			if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
        -:   67:				drawntreasure++;
        -:   68:			else {
        -:   69:				temphand[z] = cardDrawn;
        -:   70:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:   71:				z++;
        -:   72:			}
        -:   73:		}
        -:   74:		while (z - 1 >= 0) {
        -:   75:			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        -:   76:			z = z - 1;
        -:   77:		}
        -:   78:		return 0;
        -:   79:	}
        -:   80:
        1:   81:    printf ("cardtest2 - TESTING Adventurer:\n");
call    0 returned 100%
        1:   82:    p = 0;
        1:   83:	printf("Setting up game...\n");
call    0 returned 100%
        1:   84:	memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   85:	r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   86:    //G.handCount[p] = handCount;                 // set the number of cards on hand
        1:   87:	G.hand[p][0] = adventurer;
        -:   88:
        -:   89:	//playCard(0, 0, 0, 0, &G);
        -:   90:	
        -:   91:#if (NOISY_TEST == 1)
        1:   92:	printf("Played Adventurer. Handcount = %d, expected = 5\n", G.handCount[p]);
call    0 returned 100%
        1:   93:	printf("Treasure cards left in deck = 3, expected = 3\n");
call    0 returned 100%
        -:   94:#endif
        -:   95:	
        1:   96:    printf("All tests passed!\n");
call    0 returned 100%
        -:   97:	
        1:   98:    return 0;
        -:   99:}
